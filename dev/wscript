########################################################################################
# All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
# its licensors.
#
# For complete copyright and license terms please see the LICENSE at the root of this
# distribution (the "License"). All use of this software is governed by the License,
# or, if provided, by the license below or the license accompanying this file. Do not
# remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
#
# Original file Copyright Crytek GMBH or its affiliates, used under license.
#
########################################################################################

import sys

# you can uncomment this to make debugging build command lines easier.
#sys.stdout.write('[WAF] Command line: ' + str(sys.argv))

import os

from waflib import Configure, Logs, Utils, Options, ConfigSet
from waflib.Build import BuildContext, CleanContext, Context

from waflib.Tools import c_aliases, c
from waflib.Task import Task, RUN_ME, SKIP_ME
from waflib.Configure import conf, ConfigurationContext
from waflib.Errors import BuildError, WafError

# Attempt to import the aztest module
try:
    import aztest
    AZ_TEST_SUPPORTED=True
except ImportError:
    AZ_TEST_SUPPORTED=False
    pass

BUILD_METRICS_SUPPORTED=False
METRICS_NAMESPACE=None
try:
    if '--enable-build-metrics' in sys.argv:
        from build_metrics import build_metrics_reporter, build_metrics_overrides

        if not build_metrics_reporter.metric_reporter.parse_command_line(sys.argv):
             Logs.error('--metrics-namespace must be set when metrics is enabled.  Metrics will not be generated for this build.')
        else:
            BUILD_METRICS_SUPPORTED=True
            METRICS_NAMESPACE=build_metrics_reporter.metric_reporter.metrics_namespace

            build_metrics_reporter.start_metric_reporter()

except Exception:
    import traceback
    print traceback.print_exc()

# Load globals from branch spec file if we must
from waf_branch_spec import SUBFOLDERS, PLATFORM_CONFIGURATION_FILTER, MONOLITHIC_BUILDS, LUMBERYARD_ENGINE_PATH

###############################################################################
Configure.autoconfig = True

###############################################################################
CRY_WAF_TOOL_DIR = os.path.normpath('{}/Tools/build/waf-1.7.13/lmbrwaflib'.format(LUMBERYARD_ENGINE_PATH))

###############################################################################
CURRENT_WAF_EXECUTABLE = '"{}" {}/Tools/build/waf-1.7.13/lmbr_waf'.format(sys.executable, LUMBERYARD_ENGINE_PATH)

###############################################################################
if LUMBERYARD_ENGINE_PATH != '.':
    # If the lumberyard engine path external to the current path '.', update the context waf_dir
    Context.waf_dir = os.path.normpath('{}/Tools/build/waf-1.7.13'.format(LUMBERYARD_ENGINE_PATH))


def recurse_subfolders(ctx):
    recurse_subfolders = []
    for subfolder in SUBFOLDERS:
        if os.path.isabs(subfolder):
            recurse_subfolders.append(subfolder)
        else:
            recurse_subfolders.append(os.path.join(ctx.engine_path,subfolder))

    ctx.recurse(dirs=recurse_subfolders)


# Configure Options for WAF
def options(opt):

    # Load the lmbr waf modules
    opt.load('lumberyard', tooldir=[CRY_WAF_TOOL_DIR])
    opt.load_lmbr_general_modules()

    # Add additional options
    opt.add_lmbr_waf_options(AZ_TEST_SUPPORTED)

    # Lastly, load data driven settings
    opt.load_lmbr_data_driven_modules()

###############################################################################
## Configure 'configure' step
def configure(conf):
    if BUILD_METRICS_SUPPORTED:
        build_metrics_reporter.set_build_command(conf.cmd)

    # Read the required lmbr configuration
    conf.calculate_engine_path()

    conf.load_user_settings()

    conf.initialize_third_party_settings()

    if conf.is_option_true('update_user_settings'):
        conf.update_settings_options_file()

    # Run the WAF configure workflow
    conf.run_bootstrap()

    conf.configure_settings()

    conf.add_game_projects_to_specs()

    conf.add_gems_to_specs()

    try:
        import restricted
        restricted.run(conf)
    except ImportError:
        pass

    conf.load_compile_rules_for_supported_platforms(PLATFORM_CONFIGURATION_FILTER)

    conf.update_validated_platforms()

    conf.process_custom_configure_commands()

    # Recurse into sub-folders for auto conf when any wscript changes
    recurse_subfolders(conf)

    conf.configure_game_projects()

    conf.process_additional_code_folders()

    conf.process_gems()

    conf.clear_waf_timestamp_files()
        

def post_command_exec(bld):
    # [post project gen]
    if bld.cmd == 'msvs':
        project_gen_timestamp = bld.get_bintemp_folder_node().make_node('project_gen.timestamp')
        project_gen_timestamp.write('')
    # [post uberfile gen]
    elif bld.cmd == 'generate_uber_files':
        generate_uber_files_timestamp = bld.get_bintemp_folder_node().make_node('generate_uber_files.timestamp')
        generate_uber_files_timestamp.write('')
    # [post build]
    elif bld.cmd.startswith('build'):
        for message in bld.post_build_msg_info:
            Logs.info(message)

        for message in bld.post_build_msg_warning:
            Logs.warn(message)

        for message in bld.post_build_msg_error:
            Logs.error(message)

stored_file_filter = ''
stored_output_file = ''


###############################################################################
# Run 'build' step
def build(bld):
    if BUILD_METRICS_SUPPORTED:
        build_metrics_reporter.add_output_directory(bld.get_variant_dir())
        build_metrics_reporter.set_build_command(bld.cmd)

    if not isinstance(bld, BuildContext):
        bld.fatal("[Error] Invalid build command: '{}'.  Type in '{} --help' for more information"
                  .format(bld.cmd if hasattr(bld, 'cmd') else str(bld), CURRENT_WAF_EXECUTABLE))

    # Read the required lmbr configuration
    bld.calculate_engine_path()

    bld.validate_build_command()

    #If the user wants to build a monolithic build for Mac add the platform to the list
    if bld.is_option_true('mac_build_monolithic'):
        MONOLITHIC_BUILDS.append( 'darwin')

    bld.load_user_settings()

    bld.initialize_third_party_settings()

    bld.options.project_spec = bld.options.project_spec.strip()  # remove spaces

    # Create a post build message container
    bld.post_build_msg_info = []
    bld.post_build_msg_warning = []
    bld.post_build_msg_error = []

    bld.add_group('az_code_gen_group')
    bld.add_group('regular_group')
    bld.set_group('regular_group')

    bld.prepare_build_environment()

    bld.add_gems_to_specs()
    bld.add_game_projects_to_specs()

    if not bld.check_special_command_timestamps():
        return

    # Check conditionally loaded modules
    bld.check_module_load_options()

    ###########################################
    # Check if we need to start ourself recursively for IB
    if bld.invoke_waf_recursively(BUILD_METRICS_SUPPORTED, METRICS_NAMESPACE):
        if BUILD_METRICS_SUPPORTED:
            # we don't need anymore metrics from this build, so stop the reporter
            build_metrics_reporter.stop_metric_reporter()
        return

    ###########################################
    bld.add_post_fun(post_command_exec)

    ###########################################
    # Load configuration overwrites
    bld.env['CONFIG_OVERWRITES'] = bld.get_solution_overrides()

    # Load Core Engine Parts (Engine, Tools, Core Shaders etc)
    bld.game_project = None

    recurse_subfolders(bld)

    bld.process_gems()

    if bld.env['CONFIGURATION'] != 'project_generator':
        # Only attempt to bootstrap Qt if the host is not linux
        bld.qtlib_bootstrap(bld.env['PLATFORM'], bld.env['CONFIGURATION'])

    bld.setup_game_projects()

    bld.process_additional_code_folders()

    # Save current build environment so that later commands in a chain can make use of the information (ex. run_tests)
    if 'build' in bld.cmd:
        bld.env.store(os.path.join(bld.cache_dir, 'last_build_cache.py'))

def package(pkg):
    pkg.options.project_spec = pkg.options.project_spec.strip()  # remove spaces
    pkg.calculate_engine_path()
    pkg.load_user_settings()
    pkg.initialize_third_party_settings()
    pkg.prepare_build_environment()
    pkg.add_gems_to_specs()
    pkg.add_game_projects_to_specs()
    pkg.game_project = pkg.project

    pkg.check_module_load_options()

    pkg.process_gems()
    pkg.setup_game_projects()

    recurse_subfolders(pkg)


def deploy(ctx):
    if not ctx.variant:
        ctx.fatal('Deploy task does not have a variant specified, cannot continue')
    if not hasattr(ctx, 'features') or ctx.features is None:
        ctx.fatal('Deploy task does not have any deployment features attached to it')
    (platform, configuration) = ctx.get_platform_and_configuration()

    # Read the required lmbr configuration
    ctx.calculate_engine_path()

    ctx.initialize_third_party_settings()

    ctx.env['PLATFORM'] = platform
    ctx.env['CONFIGURATION'] = configuration
    ctx(features=ctx.features)

###############################################################################
def show_option_dialog(ctx):
    ctx.gui_modify_user_options()


###############################################################################
class execute_waf_options_dialog(BuildContext):
    ''' Util class to execute waf options dialog  '''
    cmd = 'show_option_dialog'
    fun = 'show_option_dialog'


###############################################################################
if AZ_TEST_SUPPORTED:
    def run_tests(ctx):
        """ Runs tests using the AzTestScanner """
        # Start by grabbing the full args from command line
        args = ['scan']
        if ctx.options.test_params:
            args += ctx.options.test_params.split()

        # Convenience function to check for flags in args
        def has_params(args, *params):
            return any(x in args for x in params)

        # If we are chaining, we want the cached info from the last build command
        # We do not override parameters that are passed in by the user (ex. the dir to test)
        ctx.env.load(os.path.join(ctx.cache_dir, 'last_build_cache.py'))
        if not has_params(args, '-d', '--dir'):
            args += ['--dir', ctx.get_output_folders(ctx.env['PLATFORM'], ctx.env['CONFIGURATION'])[0].abspath()]
        if not has_params(args, 'o', '--only') and ctx.options.targets:
            args += ['--only', ctx.options.targets]

        aztest.execute(args)


    class RunTestsContext(BuildContext):
        cmd = 'run_tests'
        fun = 'run_tests'


def wrap_execute(execute_method):
    """
    Decorator used to set the commands that can be configured automatically

    :param execute_method:     The method to execute
    """
    def execute(self):

        def _set_lmbrwaf_version_tag(bin_temp_node, overwrite=False):
            """
            Tag the BinTemp with the lmbr_waf version tag if one is supplied
            """
            if not LMBR_WAF_VERSION_TAG:
                return
            current_lmbrwaf_version = str(LMBR_WAF_VERSION_TAG)
            lmbrwaf_version_path = os.path.join(bin_temp_node.abspath(), 'lmbrwaf.version')
            if os.path.exists(lmbrwaf_version_path) and not overwrite:
                return
            from ConfigParser import ConfigParser
            config = ConfigParser()
            with open(lmbrwaf_version_path, 'w') as lmbrwaf_version_file:
                config.add_section('General')
                config.set('General', 'version_tag', current_lmbrwaf_version)
                config.write(lmbrwaf_version_file)

        def _clean_bintemp(bin_temp_node, reason=None):
            """
            Perform the drastic measure of wiping out BinTemp because we detected a situation that requires it (see
            comments above for _check_bintemp_clean()
            """
            if not os.path.exists(bin_temp.abspath()):
                return

            clean_bintemp_lock_file_path = os.path.join(bin_temp.abspath(), 'cleanbintemp.lock')
            lock_acquired = False

            try:
                current_pid = str(os.getpid())
                if os.path.isfile(clean_bintemp_lock_file_path):
                    with open(clean_bintemp_lock_file_path, 'r') as clean_bintemp_lock_file:
                        read_pid = clean_bintemp_lock_file.read()
                        if current_pid != read_pid:
                            raise WafError('[ERROR] Another WAF process is currently performing this action.  Please wait '
                                           'until that finishes and retry again.  If the problem persists, manually delete '
                                           'BinTemp from your root path.')
                else:
                    with open(clean_bintemp_lock_file_path,'w') as clean_bintemp_lock_file:
                        clean_bintemp_lock_file.write('{}'.format(os.getpid()))
                    lock_acquired = True

                bintemp_subfolders = [os.path.join(bin_temp.abspath(), '{}_{}'.format(plat, conf)) for plat in
                                      PLATFORMS[Utils.unversioned_sys_platform()] for conf in CONFIGURATIONS]

                # Check if we actually have to clean bintemp
                has_bintemp_build_paths = False
                for bintemp_subfolder in bintemp_subfolders:
                    if os.path.exists(bintemp_subfolder):
                        has_bintemp_build_paths = True
                        break

                if has_bintemp_build_paths:
                    Logs.pprint('RED', '[INFO] The current contents of BinTemp is out of sync with the current build scripts. ')
                    if reason:
                        Logs.pprint('RED', '[INFO] {}'.format(reason))
                    Logs.pprint('RED', '[INFO] It will be cleared out to bring all of the intermediate/generated files update to date and prevent any potential')
                    Logs.pprint('RED', '[INFO] WAF-related issues caused by the build script changes.  This will force a one-time re-configure and full rebuild.')
                    Logs.pprint('RED', '[INFO] Deleting BinTemp, please wait...')
                    for bintemp_subfolder in bintemp_subfolders:
                        if os.path.exists(bintemp_subfolder):
                            try:
                                shutil.rmtree(bintemp_subfolder)
                            except Exception as err:
                                raise WafError( '[ERROR] Problem trying to clean out folder "{}" ({}).  Please delete your ' 
                                                'BinTemp folder manually and restart the build.'.format(bintemp_subfolder, str(err)))
            finally:
                # Clear the lock file
                if lock_acquired:
                    os.remove(clean_bintemp_lock_file_path)

        def _read_lmbrwaf_version_tag(bin_temp_node):
            """
            Attempt to read the lmbr_waf version from the version tag file if possible.  Return None if the file doesnt exist or if there is a problem reading the file
            :return: The value of the version tag from the version file if possible
            """
            lmbrwaf_version_file_path = os.path.join(bin_temp_node.abspath(), 'lmbrwaf.version')
            if not os.path.exists(lmbrwaf_version_file_path):
                return None

            try:
                from ConfigParser import ConfigParser
                parser = ConfigParser()
                parser.read(lmbrwaf_version_file_path)
                current_version_tag = str(parser.get('General', 'version_tag'))
                return current_version_tag
            except Exception as err:
                Logs.warn('[WARN] Problem reading {} file:'.format(lmbrwaf_version_file_path, str(err)))
                return None

        def _clear_waf_pickle(bin_temp_node):
            pickle_files = glob.glob(os.path.join(bin_temp_node.abspath(),'.wafpickle*'))
            for pickle_file in pickle_files:
                try:
                    os.remove(pickle_file)
                except Exception as e:
                    Logs.warn('[WARN] Unable to clear pickle file {}: {}'.format(pickle_file, str(e)))

        def _initialize_bintemp(bin_temp_node):
            """
            Perform the initialization of the BinTemp folder
            """
            bin_temp_node.mkdir()

            if not LMBR_WAF_VERSION_TAG:
                # If there is no lmbrwaf version tag, we can ignore the clean bintemp check or update
                return

            current_lmbrwaf_version = _read_lmbrwaf_version_tag(bin_temp_node)
            check_lmbrwaf_version = str(LMBR_WAF_VERSION_TAG)
            if current_lmbrwaf_version != check_lmbrwaf_version:
                # Detected a lmbr_waf version tag update, start the bintemp wipe process
                reason = "BinTemp is not WAF version tagged." if current_lmbrwaf_version is None else \
                         "Existing BinTemp WAF Version '{}' does not match current WAF Version '{}'" \
                            .format(current_lmbrwaf_version,check_lmbrwaf_version)
                _clean_bintemp(bin_temp_node, reason)
                _clear_waf_pickle(bin_temp_node)
                # Inject the updated version tag into BinTemp
                _set_lmbrwaf_version_tag(bin_temp_node, True)

        # Make sure to create all needed temp folders
        bin_temp = self.get_bintemp_folder_node()
        bin_temp.mkdir()
        tmp_files_folder = bin_temp.make_node('TempFiles')
        tmp_files_folder.mkdir()

        # Before executing any build or configure commands, check for config file
        # and for bootstrap updates
        self.load_user_settings()

        if getattr(self, "do_auto_configure", None):
            if self.do_auto_configure():
                return

        return execute_method(self)
    return execute

BuildContext.execute = wrap_execute(BuildContext.execute)
ConfigurationContext.execute = wrap_execute(ConfigurationContext.execute)
