########################################################################################
# All or portions of this file Copyright     (c) Amazon.com, Inc. or its affiliates or
# its licensors.
#
# For complete copyright and license terms please see the LICENSE at the root of this
# distribution (the "License"). All use of this software is governed by the License,
# or, if provided, by the license below or the license accompanying this file. Do not
# remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
########################################################################################

def build(bld):

    msvc_cxx_flags = [
        '/W4', # warning level
    ]

    debug_defines = [
        'AZ_DEBUG_BUILD'                # Non-shipping build.
    ]

    development_defines = [
        'EMFX_DEVELOPMENT_BUILD',       # This is a dev build.
        'EMFX_EMSTUDIOBUILD'            # Support EMStudio tools - we'd like to strip this in release builds at some point.
    ]

    editor_defines = [
        'EMFX_DEVELOPMENT_BUILD',
        'EMFX_EMSTUDIOBUILD',
        'EMFX_EMSTUDIOLYEMBEDDED',      # EMotionFX tool needs to know it's embedded in another Qt app.
        'EMOTIONFXANIMATION_EDITOR'     # Editor build of Gem code needs to register additional components.
    ]

    shipping_defines = [
        'EMFX_DEVELOPMENT_BUILD'        # To be removed
    ]

    # Library containing all editor & runtime common EmotionFX animation gem code, and links into both the runtime and editor modules.
    kw = dict(
        target                      = 'EMotionFXStaticLib',
        platforms                   = ['all'],
        configurations              = ['all'],
        vs_filter                   = 'Gems/EMotionFXShared',
        file_list                   = ['emotionfx_shared.waf_files',
                                       'MCore/mcore.waf_files',
                                       'EMotionFX/emotionfx.waf_files',
                                       'EMotionFX/CommandSystem/commandsystem.waf_files',
                                       'EMotionFX/Exporters/ExporterLib/exporterlib.waf_files'
                                      ],
        use                         = ['AzFramework', 'LmbrCentral'],
        win_features                = ['crcfix'],
        #msvc_cxxflags               = msvc_cxx_flags,
        includes                    = ['./Include',
                                       './Source',
                                       './',
                                       bld.Path('Gems/LmbrCentral/Code/include')        # Not the right way, use_required_gems should be used, but can't because of an issue (LY-51626).
                                      ],
        export_includes             = ['./Include', "./"],
        disable_pch                 = True,
        pch                         = '',

        profile_defines             = list(development_defines),
        profile_dedicated_defines   = list(development_defines),
        debug_defines               = list(development_defines) + list(debug_defines),
        debug_dedicated_defines     = list(development_defines) + list(debug_defines),
        release_defines             = list(shipping_defines),
        release_dedicated_defines   = list(shipping_defines),
        test_all_defines            = list(development_defines)
    )
    
    for p in bld.env['RESTRICTED_PLATFORMS']:
        kw['{}_file_list'.format(p)] = ['MCore/Source/{0}/mcore_{0}.waf_files'.format(p)]

    bld.CryEngineStaticLibrary(**kw)

    # Main Gem - Has dependency on EMotionFXStaticLib gem shared library.
    bld.DefineGem(
        platforms                   = ['all'],
        file_list                   = ['emotionfx.waf_files'],
        use                         = ['EMotionFXStaticLib'],
        win_features                = ['crcfix'],
        #msvc_cxxflags               = msvc_cxx_flags,
        includes                    = ['./Include',
                                       './Source',
                                       './'
                                      ],
        export_includes             = ['./Include'],
        disable_pch                 = True,
        pch                         = '',

        profile_defines             = list(development_defines),
        profile_dedicated_defines   = list(development_defines),
        debug_defines               = list(development_defines) + list(debug_defines),
        debug_dedicated_defines     = list(development_defines) + list(debug_defines),
        release_defines             = list(shipping_defines),
        release_dedicated_defines   = list(shipping_defines),
        test_all_defines            = list(development_defines),

        win_x64_clang_debug_test_enable_rtti = True,

        # Editor module - Includes pulls in EmotionFX tools code, and has a dependencies on AzToolsFramework and the EMotionFXStaticLib gem shared library.
        editor = dict(
            platforms       = ['win', 'darwin'],
            configurations  = ['debug', 'debug_test', 'profile', 'profile_test'],
            file_list       = ['emotionfx.waf_files',
                               'emotionfx_editor.waf_files',
                               'MysticQt/mysticqt.waf_files',
                               'EMotionFX/Tools/EMotionStudio/EMStudioSDK/emstudiosdk.waf_files',
                               'EMotionFX/Tools/EMotionStudio/Plugins/StandardPlugins/standardplugins.waf_files',
                               'EMotionFX/Tools/EMotionStudio/Plugins/RenderPlugins/renderplugins.waf_files',
                               'EMotionFX/Rendering/rendering.waf_files',
                               'EMotionFX/Pipeline/SceneAPIExt/sceneapi_ext.waf_files',
                               'EMotionFX/Pipeline/RCExt/rc_ext.waf_files'
                              ],
            use             = ['AzToolsFramework',
                               'AzQtComponents',
                               'EMotionFXStaticLib', 
                               'SceneCore', 
                               'SceneData'
                              ] + bld.make_aws_library_task_list(['LyMetricsShared', 'LyIdentity', 'LyMetricsProducer']), #Do not change the order of 'LyMetricsShared', 'LyIdentity', 'LyMetricsProducer'
            features        = ['ExternalLyMetrics', 'ExternalLyIdentity'],
            uselib          = ['QT5OPENGL',
                               'AWS_CPP_SDK_CORE',
                               'AWS_CPP_SDK_COGNITO_IDENTITY_STATIC',
                               'AWS_CPP_SDK_IDENTITY_MANAGEMENT',
                               'AWS_CPP_SDK_MOBILEANALYTICS',
                               'GLEW'
                              ],
            includes        = ['./Include',
                               './Source',
                               './EMotionFX/Tools',
                               './EMotionFX/Pipeline',
                               './',
                               bld.Path('Code/Sandbox/Plugins/EditorCommon'),
                               bld.Path('Code/Sandbox/Editor'),
                               bld.Path('Code/Sandbox/Editor/Include'),
                               bld.Path('Code/Tools')
                              ],
            disable_pch     = True,
            pch             = '',

            debug_defines   = list(editor_defines) + list(debug_defines),
            profile_defines = list(editor_defines),

            win_lib         = ['opengl32', 'dxguid', 'dinput8'],
            #msvc_cxxflags   = msvc_cxx_flags,

        )
    )
