########################################################################################
# All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
# its licensors.
#
# For complete copyright and license terms please see the LICENSE at the root of this
# distribution (the "License"). All use of this software is governed by the License,
# or, if provided, by the license below or the license accompanying this file. Do not
# remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
########################################################################################

import os, shutil

from waflib import Configure, Utils
from waflib.Build import BuildContext

def build(bld):

    if not bld.is_target_platform_enabled('android'):
        return

    # only copy the native app glue source during the configure context
    if isinstance(bld, Configure.ConfigurationContext):

        # copy over the native activity glue files
        dest_directory = bld.path.make_node('NativeActivityGlue')
        dest_directory.mkdir()

        ndk_root = bld.get_env_file_var('LY_ANDROID_NDK')
        native_activity_glue = os.path.join(ndk_root, 'sources', 'android', 'native_app_glue')

        for src in ('android_native_app_glue.c', 'android_native_app_glue.h'):
            source_file = os.path.join(native_activity_glue, src)
            dest_file = dest_directory.make_node(src)

            if os.path.exists(dest_file.abspath()):
                dest_file.chmod(Utils.O755)

            shutil.copy2(source_file, dest_file.abspath())
            dest_file.chmod(Utils.O755)

    # launchers are considered exempt modules with the system that determines which modules, and their 
    # dependencies, should be included in the build.  because of this, launcher only dependencies 
    # will be skipped unless we force them in the build by either adding them into a spec file
    # or manually like below
    if bld.is_android_platform(bld.env['PLATFORM']) and bld.options.project_spec:
        bld.get_all_module_uses(bld.options.project_spec).add('NativeActivityGlue')

    bld.CryEngineStaticLibrary(
        target              = 'NativeActivityGlue',
        vs_filter           = 'Android',
        platforms           = ['android'],
        exclude_test        = True,
        client_only         = True,
        file_list           = 'empty.waf_files',

        android_file_list           = 'native_activity_glue.waf_files',
        android_export_includes     = ['NativeActivityGlue'],
        android_cflags              = ['-fvisibility=default'],
    )

    if isinstance(bld, BuildContext):
        bld.read_aar(
            name = 'support-compat',
            group = 'com.android.support'
        )

    bld.CryLauncher(
        target              = 'AndroidLauncher',
        platforms           = ['android'],
        exclude_test        = True,
        client_only         = True,
        file_list           = 'empty.waf_files',

        android_file_list       = 'android_launcher.waf_files',
        android_use             = ['AzGameFramework', 'NativeActivityGlue'],
        android_includes        = [bld.Path('Code/CryEngine/CryCommon'),
                                   bld.Path('Code/Launcher')],

        # Force the native app glue entry point to be defined.  This is an alternative method to
        # calling app_dummy in android_main that works with newer NDKs which have deprecated
        # app_dummy (but still seem to strip this function)
        android_linkflags           = ['-u', 'ANativeActivity_onCreate'],

        android_debug_linkflags     = ['-shared'],
        android_profile_linkflags   = ['-shared'],

        android_java_src_path   = [bld.Path('Code/Framework/AzAndroid/java')],
        android_java_libs       = bld.Path('Code/Tools/Android/ProjectBuilder/android_libraries.json'),
    )


def package(ctx):
    ctx.package_game_legacy(
        target          = 'AndroidLauncher',
        platforms       = ['android'],
        exclude_test    = True,
        client_only     = True,
    )


def deploy(ctx):
    ctx.deploy_game_legacy(
        target          = 'AndroidLauncher',
        platforms       = ['android'],
        exclude_test    = True,
        client_only     = True,
    )